Course Notes: "Advanced Css and Sass" (https://www.udemy.com/course/advanced-css-and-sass/)
by Jonas Schmedmann (https://www.udemy.com/course/advanced-css-and-sass/#instructor-1)

MDN: https://developer.mozilla.org/en-US/docs/Web

********************************************************************************
* Project 1: Natours Web Site
********************************************************************************

Lecture 7) Building the Header - Part 2
* Positioning an inline element is easiest if it is wrapped in a block element
* Position: absolute is relative to nearest positioned ancestor, so position an ancestor
  (usually with position: relative) even if that ancestor would otherwise be fine with static
  positioning.
* <h1> is the primary text for the page, for SEO and screen readers
* Use <span> to style text.  Multiple <span> within <h1> to style different parts of the <h1>.
  Style <span> with display: block to break it into two lines.  (<div>, which is a block element
  naturally, is not permitted within <h1>).
* Percentages in translate() function are defined relative to height and width of the element itself
  (not the parent element, as percentages usually are);


Lecture 8) Creating Cool CSS Animations
* Using the @keyframes @keyframes rule:
@keyframes [AnimationName] {
    [%] {
        [properties]
    }
}
* for browser performance, only animate opacity and transform
* "backface-visibility: none" on animated element suppresses animation jitter


Lecture 9) Building a Complex Animated Button - Part 1
* Pseudo-classes are "special state" of selector, to style elements under special conditions
* :pseudo-class
* Padding on inline element does not move the element, so background will cover surrouding elements;
  to fix this, declare the ineline element with display: inline-block.
* Add transition property on *initial* state


Lecture 10) Building a Complex Animated button - Part 2
* Psudo-elements "let you style a specific part of the selected element" (MDN).
* ::pseudo-element
* ::after pseudo-element adds a virtual element after the selected element
* To achieve the effect in this lesson, add element exactly like the current one, but behind it
* ::after needs content (even if its empty) via "content:" property to appear on page
* ::after needs "display" property to appear on page


Lecture 12) Three Pillars of Writing Good HTML and CSS
* Responsive Design:
  * fluid layouts
  * media queries
  * responsive images
  * correct units
  * desktop-first vs mobile-first
* Maintainable and scalable code
  * clean
  * easy to understand
  * growth
  * re-usable
  * file organization
  * class names
  * html structure
* Web performance
  * fewer HTTP requests
  * less code, compressed code
  * CSS preprocessor
  * fewer images, compressed images


Lecture 13) How CSS Works Behind the Schenes: An Overview
* CSS parsing:
  * Resolve conflicting CSS declarations (cascade)
  * Process final CSS values


Lecture 14) How CSS is Parsed, Part 1: The Cascade and Specificity
* Cascade: process of resolving conflicts between rules when more than one rule applies to an element
* CSS sources: author, user, browser ("user agent")
* Importance > specificity > source order
* Importance
  * User !important declarations
  * author !important declarations
  * author declarations
  * user declarations
  * browser defaults
* Specificity (inline, IDs, classes, elements)
  * Inline
  * IDs
  * classes, pseudo-classes, attributes
  * elements, pesuedo-elements
* Source order: last CSS declaration resolves ties beteween rules with identical specificities
* Universal selector * has no specificity value (0, 0, 0, 0)
* Rely more on specificity than order
* But rely on order when using 3rd party stylesheets: always put your sheet last.


Lecture 16) How CSS is Parsed, Part 2: Value Processing
* Example of how browser calculates values, step by step
* All linear units eventually converted to pixels
* declared value
  -> cascaded value (after cascade)
  -> specified value: cascaded value (if any), else computed value of parent element (if inheritable), else initial value
  -> computed value (convert relative to absolute)
  -> used value (final calculations)
  -> actual value (rounded, browser and device restrictions)
* Initial value: For every element, every property has a value, even if none is declared.
* Converting Units from relative to absolute (px)
  * % values are relative to parent element's corresponding size (font, height or width)
  * em use parent element font size for fonts sizes, current element font size for lengths
  * rem use root element font size of both fonts and lengths
* vh: 1% of viewport height
* vw: 1% of viewport width


Lecture 17) How CSS is Parsed, Part 3: Inheritance
* propagating property values from parent elements to children
* inheritance: specified value = COMPUTED value of parent element
* generally, text-related properties are inheritable, others not
* computed value, not declared value, is inherited
* values inherited only if value is not declared
* "inherit" keyword forces inheritance
* "initial" keyword restores value to initial value


Lecture 19) How CSS Renders a Website: The Visual Formatting Model
* Box model: every element
* Content: text, images, etc.
* Padding: transparent area around content inside of box
* Border: goes around content
* Margin: Space between boxes
* Fill area: content + padding + border (not margin)
* height of box, if not otherwise specified, is height of content
* default box-sizing: height and width exclude padding and border
* border-box: height and width include padding and border
* block element:
  * displayed as block
  * also include flex, list-item and table displays
  * 100% of parent width
  * vertical stack, includes line break
  * box model applies as showed
* inline
  * content distributed in lintes
  * occupies only the content's space
  * no line breaks
  * NO HEIGHT AND WIDTH
  * padding and margin on left and right only
* inline-block
  * inline boxes but with box model applied as showed
* Positioning schemes: normal, float, absolute
* normal: default, laid out in source order
* float: container will not adjust height to element; requires clear fix
* absolute:
  * element removed from normal flow
  * no impact on surrounding content or elements
  * offset w/ top, bottom, left, right
* stacking context: z-index and others


Lecture 20) CSS Architecture, Components and BEM
* page: components held together by the layout
* components should be re-usable across, between projects;
* components should be independent of parent
* BEM: Block-element modifier paradigm
  * block: standalone component meaningful on its own
  * element: part of a block lacking independent meaning
  * element class name includes block classname: low specificity
  * modifier: modifies the element
* 7-1 Pattern: 7 folders for partial Sass files, 1 main Sass file
  * base/ components/ layout/ pages/ themes/ abstracts/ vendors/


Lecture 24) First Steps with Sass: Variables and Nesting
* SASS functions darken, lighten


Lecture 25) First Steps with Sass: Mixins, Extends and Functions
* mixin: re-usable piece of SASS
* @mixin to define
* @include to use
* mixins can take parameters
* SASS user-defined functions:
    @function divide($a, $b) {
        @return $a/$b;
    }

* SASS extends:
  %btn-placeholder {
     padding: 10px;
  }
  @extend %btn-placeholder
* @include copies the included text to the selector; @extend copies the selector to the extension
* Use @extends only if the rules being extended are inherently related


Lecture 27) NPM Packages: Let's Install SASS Locally
* First install node JS and NPM.  (https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html)
$> curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
$> . ~/.nvm/nvm.sh
$> nvm install node
* Then create package.json and download depdendencies
$> node init     # creates package.json in dev environment
$> npm install node-sass --save-dev   # writes sass to package.json dev dependencies
$> npm install jquery --save          # writes to package.json dependencies
$> npm install                        # recreates from package.json file
$> npm uninstall jquery --save


Lecture 28) NPM Scripts: Let's Write and Compile SASS Locally
* Run SASS from the linux command line
$> node-sass test.scss test.css
$> in package.json
scripts {
    "compile:sass" : "node-sass sass/main.scss css/style.css"
}
$> npm run compile:sass


Lecture 29) The Easiest Way of Automatically Reloading a Page on File Changes
$> npm install -g live-server
$> live-server


Lecture 32) Implementing the 7-1 CSS Architecture with Sass
* 7 sub-directories, 1 main file including them all
* partials start with underscore
* base/ for low-level styles: resets, <html> and <body>.  base, utilities, typography, animations
* abstracts/ does not output css.  variables, mixins, functions.
* components/ independent, reusable building blocks composing the page held together by layout.
* layouts/ for each piece of the global layout
* pages/ styles for specific page. home
* themes/ and vendors/ not used in this project.


Lecture 33) Basic Principles of Responsive Design and Layout Types
* Fluid grids and layouts.  % instead of pixels: floats, flexbox, css grid.
* Flexible/responsive images. Typically largest part of website; optimize
* Media queries, breakpoints.
* Layout is single most important aspect of design.

Lecture 34) Building a Custom Grid with Floats
* Grid: columns and gutters, rows
* Center block element w/in block element: margin: 0 auto;
* calc(): CSS function takes place during page layout, not during SCSS pre-processing
* Using SASS variable in calc() requires wrapping the variable in #{}
* Floating all elements collapses height of container
* Attribute selectors:
* [foo="bar"] elements w/ attribute foo of bar
* [foo^="bar"] elements w/ attribute beginning w/ bar
* [foo*="bar"] elements w/ attribute containing bar
* [foo$="bar"] elements w/ attribute ending w/ bar


Lecture 35) Building the About Section - Part 1
* Components
* Utility classes: Small classes to apply a single style to multiple elements
* background-clip property: clip background image to restrict its display
* transform for multiple properties: list the properties all together
* outline and outline-offset properties ?
* styling unhovered elements ?


Lecture 36) Building the About Section - Part 2
* Styled a link to look more like a button


Lecture 37) Building the About Section - Part 3,
* Define width of images in %, to scale with viewport size
* outline, outline-offset


Lecture 38) Building the Features Section
* include and use icon font (linea.io)
* "skewed" section design
* direct child selector ">"
* fonts/ directory contains different files for different browsers
* Used transform: skew() to achieve similar effect implemented using "clip-path" in header
* Need to "un-skew" direct children using direct childe selector ">"
* The feature boxes scale to the size of the content, independently of their siblings' sizes, so if they contain
  different amount of text, they will be different sizes.  (frowny face.)  Another student raised this question
  and offered a solution: a bit of a kludge, using absolute values (not relative like percentages or something),
  which doesn't seem like it would be particularly responsive, but the instructor could offer nothing better:
  https://www.udemy.com/course/advanced-css-and-sass/learn/lecture/8274498#questions/10682678


Lecture 39) Building the Tours Section - Part 1
* Rotating Card effect: perspective; backface-visibility property; background blend modes; box-decoration-break
* transform: rotate.  Apply perspective on parent
* perspective: lower value => more dramatic effect; start high, work down
* IMPORTANT: When children are taken out of the natural flow (eg floats, absolute pos) the parent height collapses to 0
  * floats: clearfix
  * absolute: explicit height on parent, same as height of child


Lecture 40) Building the Tours Section - Part 2
* (fixed bug in rotating card effect from lecture 39)
* blend linear gradient and background image
* background-blend-mode: how an element's background images blend with each other and with the element's background color.
* bg image overwrites parent element's rounded corners; use overflow: hidden on parent
* box-decoration-break property specifies how an element's fragments should be rendered when split across lines, columns or pages


Lecture 41) Building the Tours Section - Part 3
* 2nd and 3rd cards based on 1st
* card backs: mostly work, nothing really new
* centering div in div: "margin: 0 auto" in child
* center inline in div: "text-align: center" in parent


Lecture 42) Building the Stories Section - Part 1
* text flow around shapes w/ "shape-outside" and "float" properties
* filter images
* bg video covering entire section
* <video> element
* "object-fit" property
* circle CSS function. Requires element has defined height & width, and floated


Lecture 43) Building the Stories Section - Part 2
* <figure> with <img> and <figcaption> children
* "filter" property on images
* Skewing image on Chrome leaves a trace of the original image outside the circle clip path,
  resolved by changing the skew from 12deg to 12.01deg (not sure why) and/or overflow: hidden
  ref: https://www.udemy.com/course/advanced-css-and-sass/learn/lecture/8274510#questions/7987144

Lecture 44) Building the Stories Section - Part 3
* background video
* <video> with <source> child (not using "src" attrib), w/ autoplay muted loop attribs
* use default text if <video> not supported
* free videos from coverr.io
* fit bg video to container w/ "object-fit" property

Lecture 45) Building the Booking Section - Part 1
* solid color gradients
* general and adjacent sibling selectors
* ::input-placeholder pseudo-element
* :focus, :invalid, :placeholder-shown and :checked pseudo-classes
* custom radio buttons
* using percentage values in linear-gradient to specify where the colors start/stop to achieve hard edge


Lecture 46) Building the Booking Section - Part 2
* placeholder text in inputs does not inherit font family
* general sibling selector: ~
* adjacent sibling selector: +


Lecture 47) Building the Booking Section - Part 3
* custom radio buttons
* Cannot style radio buttons through CSS, so build custom radio via <span>


Lecture 49) Building the Navigation - Part 1
* animating solid-color gradients:
  * "background-image" (for the solid-color gradient)
  * "background-size" (so both halves of the background exceed the size of the foreground)
  * "background-position" (to display the correct half of the background)
* checkbox hack: hidden checkbox, plus label for it, plus the reveal
* custom animation timing functions / cubic bezier curves
* "transform-origin" property

Lecture 50) Building the Navigation - Part 2
* Timing functions: cubic-bezier()
* ref: easings.net


Lecture 51) Building the Navigation - Part 3
* animated hamburger menu using checkbox hack


Lecture 52) Building a Pure CSS Popup - Part 1
* display: table and table-cell (parent and child) for layouts
* "vertical-align" property for table-cell
* CSS text column properties: column-count, column-gap, column-rule
* automatically hyphenate words with "hyphen" property (requires "lang" attrib in <html> element)


Lecture 53) Building a Pure CSS Popup - Part 2
* :target pseudo-class


Lecture 55) Mobile-First vs Desktop-First and Breakpoints
* gs.statcounter.com/screen-resolution
* 600px, 900px, 1200px, 1800px: phone-portrait, tab-portrait, tab-landscape, desktop, massive


Lecture 56) Sass Mixins and Media Queries
* ems and rems in media queries are NOT affected by root font size setting
* ems or rems in media queries equals browser's font size
  (16px by default, can be modified by user)
* EXPERTS: "ems better than rems in media queries"
* arrange max-width media queries (desktop-first) in order of decreasing breakpoint size
* arrange min-width media queries (mobile-first) in order of increasing breakpoint size

